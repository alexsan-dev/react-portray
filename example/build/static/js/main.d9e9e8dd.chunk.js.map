{"version":3,"sources":["../../src/bin/Translate.ts","../../node_modules/callsite/index.js","../../src/index.tsx","Components/Test.tsx","App.tsx","index.tsx"],"names":["portrayAppCtx","stringsDict","srcPath","orig","Error","prepareStackTrace","_","stack","err","captureStackTrace","arguments","callee","value","fileName","srcPathSolved","path","fs","exists","console","newStrings","JSON","portrayContext","React","setStrings","langs","setLang","mainLang","langCode","strings","Component","withStrings","$","props","ctx","key","trimmedKey","text","tmpStrings","Object","getTextFromDict","withPortray","initStrings","settings","ReactDOM","render","document","getElementById"],"mappings":"oQAIMA,EAAiBC,YAErB,IAAMC,ECLS,WACf,IAAIC,EAAOC,MAAMC,kBACjBD,MAAMC,kBAAoB,SAASC,EAAGC,GAAQ,OAAOA,GACrD,IAAIC,EAAM,IAAIJ,MACdA,MAAMK,kBAAkBD,EAAKE,UAAUC,QACvC,IAAIJ,EAAQC,EAAID,MAEhB,OADAH,MAAMC,kBAAoBF,EACnBI,EDFS,QAAcK,YAC5B,IAAMC,EAAmBD,EAAzB,cACA,gBAAUC,WAERA,cAFF,mCAFF,GASMC,EAAwBC,YAA9B,GACAC,cAA0BC,YACxB,GACED,gBAA2B,cACzB,KAASE,aAAT,OACK,CAEH,IAAMC,EAAa,8BAGdC,eAILJ,gBAEEI,eAFFJ,IAGGR,YACC,GAASU,2BENjBG,EACJC,wBATiC,CACjCC,WAAY,aACZC,MAAO,CAAC,KAFyB,MAGjCC,QAAS,aACTC,SAJiC,KAKjCC,SALiC,KAMjCC,QAAS,KCpBX,ID8F+BC,ECpFhBC,GDoFgBD,EC9FN,SAAC,GAAW,IAATE,EAAQ,EAARA,EAC1B,OACE,6BACGA,EADH,qCAEE,6BACCA,EAHH,uCD8FyCC,YAEzC,IAAMC,EAAMX,qBAAZ,GAMA,OAAO,2CAAeU,EAAWC,G,EALjC,YACE,OAjCN,SAAyBC,EAAzB,GAEE,IAAMC,EAAqBD,KAA3B,OAGA,GAAIC,KAAcF,EAAlB,QAA+B,CAC7B,IAAMG,EAAeH,aAAwBA,EAA7C,UACA,MAAOG,UAAP,EAGA,IAAMC,EAAU,eAAqBJ,EAAIL,SAYzC,OAXAS,KAAyBC,mBACvBL,aAAeN,YAAD,MAAsB,CAAC,EAEnCA,IAAaM,EAAbN,aAHJU,QAQAJ,gBAGA,EAWSM,CAAgBL,EAAvB,SE/FSM,EFoBf,SACEX,EACAY,EACAC,GAmCA,OAhC8CV,YAE5C,IAAMN,GAAmB,OAAAgB,QAAQ,IAARA,OAAA,EAAAA,EAAA,WAAzB,KACA,EAA4BpB,mBAA5B,sBAAM,EAAN,KAAM,EAAN,KAGA,EAA8BA,mBAA9B,sBAAM,EAAN,KAAM,EAAN,KASA,OACE,wBAACD,EAAD,UACET,MAAO,CACLe,WACAF,UACAC,WACAH,WAZiBJ,YACsBnB,KAC3CuB,MAWIK,UACAJ,OAAO,OAAAkB,QAAQ,IAARA,OAAA,EAAAA,EAAA,QAAmB,CAAC,KAAM,QAGnCpB,2CAXJ,MEzCWkB,EAJH,WACV,OAAO,kBAAC,EAAD,Q,KAGgC,CACvCd,SAAU,KACVF,MAAO,CAAC,KAAM,QCNhBmB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.d9e9e8dd.chunk.js","sourcesContent":["import caller from 'callsite'\nimport path from 'path'\nimport fs from 'fs'\n\nconst portrayAppCtx = (stringsDict: PortrayDict) => {\n  // RUTA DE STRINGS\n  const srcPath = caller().map((value: caller.CallSite) => {\n    const fileName: string = value.getFileName()\n    return `${fileName.substr(\n      0,\n      fileName.lastIndexOf('/')\n    )}/src/Lang/Strings.json`\n  })[2]\n\n  // REESCRIBIR STRINGS\n  const srcPathSolved: string = path.resolve(srcPath)\n  fs.exists(srcPathSolved, (exists: boolean) => {\n    if (exists) {\n      fs.readFile(srcPathSolved, (err: NodeJS.ErrnoException, data: Buffer) => {\n        if (err) console.warn(err)\n        else {\n          // NUEVO DICCIONARIO\n          const newStrings = {\n            ...stringsDict,\n            // @ts-ignore\n            ...JSON.parse(data)\n          } as PortrayDict\n\n          // ESCRIBIR ARCHIVO\n          fs.writeFile(\n            srcPathSolved,\n            JSON.stringify(newStrings),\n            (err: NodeJS.ErrnoException) => {\n              if (err) console.warn(err)\n            }\n          )\n        }\n      })\n    }\n  })\n}\nexport default portrayAppCtx\n","\nmodule.exports = function(){\n  var orig = Error.prepareStackTrace;\n  Error.prepareStackTrace = function(_, stack){ return stack; };\n  var err = new Error;\n  Error.captureStackTrace(err, arguments.callee);\n  var stack = err.stack;\n  Error.prepareStackTrace = orig;\n  return stack;\n};\n","// REACT\nimport * as React from 'react'\nimport portrayAppCtx from './bin/Translate'\n\n// MAIN HOC\ninterface PortrayContextProps {\n  mainLang?: string\n  langs?: string[]\n}\n\n// CONTEXTO\ninterface PortrayContext {\n  setStrings: (strings: PortrayDict) => void\n  setLang: (langCode: string) => void\n  strings: PortrayDict\n  langCode: string\n  mainLang: string\n  langs: string[]\n}\nconst defContext: PortrayContext = {\n  setStrings: () => {},\n  langs: ['en', 'es'],\n  setLang: () => {},\n  mainLang: 'en',\n  langCode: 'en',\n  strings: {}\n}\nconst portrayContext: React.Context<PortrayContext> =\n  React.createContext(defContext)\n\nexport function withPortray<T>(\n  Component: React.FC<T>,\n  initStrings: PortrayDict,\n  settings?: PortrayContextProps\n) {\n  // COMPONENTE\n  const PortrayWrappedComponent: React.FC<T> = (props: T) => {\n    // ESTADO\n    const mainLang: string = settings?.mainLang || 'en'\n    const [langCode, setLang] = React.useState<string>(mainLang)\n\n    // STRINGS\n    const [strings, setStrings] = React.useState<PortrayDict>(initStrings)\n\n    // ACTUALIZAR STRINGS\n    const updateStrings = (newStrings: PortrayDict) => {\n      if (process.env.NODE_ENV === 'production') portrayAppCtx(strings)\n      setStrings(newStrings)\n    }\n\n    // RENDER\n    return (\n      <portrayContext.Provider\n        value={{\n          langCode,\n          setLang,\n          mainLang,\n          setStrings: updateStrings,\n          strings,\n          langs: settings?.langs || ['en', 'es']\n        }}\n      >\n        <Component {...props} />\n      </portrayContext.Provider>\n    )\n  }\n\n  // RENDER\n  return PortrayWrappedComponent\n}\n\n// OBTENER TEXTO\nfunction getTextFromDict(key: TemplateStringsArray, ctx: PortrayContext) {\n  // FORMATO DE KEY\n  const trimmedKey: string = key[0].trim()\n\n  // VERIFICAR SI EXISTE\n  if (trimmedKey in ctx.strings) {\n    const text: string = ctx.strings[trimmedKey][ctx.langCode]\n    return text === '$' ? trimmedKey : text\n  } else {\n    // CREAR\n    const tmpStrings: PortrayDict = { ...ctx.strings }\n    tmpStrings[trimmedKey] = Object.fromEntries(\n      ctx.langs.map((langCode: string) => [\n        langCode,\n        langCode === ctx.mainLang ? '$' : ''\n      ])\n    )\n\n    // ARCHIVO\n    ctx.setStrings(tmpStrings)\n\n    // RETORNAR\n    return trimmedKey\n  }\n}\n\n// HOC\nexport function withStrings<T>(Component: Portray.FC<T>) {\n  // COMPONENTE\n  const WithStringsComponent: React.FC<T> = (props: T) => {\n    // CONTEXTO\n    const ctx = React.useContext(portrayContext)\n    function $(key: TemplateStringsArray) {\n      return getTextFromDict(key, ctx)\n    }\n\n    // RENDER\n    return <Component {...props} {...ctx} $={$} />\n  }\n\n  // RENDER\n  return WithStringsComponent\n}\n\nexport namespace Portray {\n  type Props<P> = P &\n    PortrayContext & {\n      $: (key: TemplateStringsArray) => string\n    }\n\n  export type FC<P = {}> = FunctionComponent<P>\n\n  interface FunctionComponent<P = {}> {\n    (\n      props: React.PropsWithChildren<Props<P>>,\n      context?: any\n    ): React.ReactElement<any, any> | null\n    propTypes?: React.WeakValidationMap<P>\n    contextTypes?: React.ValidationMap<any>\n    defaultProps?: Partial<P>\n    displayName?: string\n  }\n}\n\n// EXPORTAR\nexport default Portray\n","// REACT\nimport React from 'react'\n\nimport Portray, { withStrings } from 'react-portray'\n\nconst Test: Portray.FC = ({ $ }) => {\n  return (\n    <div>\n      {$`Hola Mundos`}\n      <br />\n      {$`Hola Mundos`}\n    </div>\n  )\n}\n\nexport default withStrings(Test)\n","import React from 'react'\nimport Test from './Components/Test'\n\nimport Strings from './Lang/Strings.json'\nimport { withPortray } from 'react-portray'\n\nconst App = () => {\n  return <Test />\n}\n\nexport default withPortray(App, Strings, {\n  mainLang: 'es',\n  langs: ['en', 'es']\n})\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}